/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **autorouting_job**
   * - Table in database
   */
  export namespace autorouting_job {
    export type Table = 'autorouting_job';
    export interface Selectable {
      /**
      * **autorouting_job.autorouting_job_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      autorouting_job_id: string;
      /**
      * **autorouting_job.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **autorouting_job.error**
      * - `jsonb` in database
      * - Nullable, no default
      */
      error: db.JSONValue | null;
      /**
      * **autorouting_job.has_error**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      has_error: boolean;
      /**
      * **autorouting_job.input_dsn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      input_dsn: string;
      /**
      * **autorouting_job.is_running**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_running: boolean;
      /**
      * **autorouting_job.output_dsn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      output_dsn: string;
      /**
      * **autorouting_job.was_successful**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      was_successful: boolean;
    }
    export interface JSONSelectable {
      /**
      * **autorouting_job.autorouting_job_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      autorouting_job_id: string;
      /**
      * **autorouting_job.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampTzString;
      /**
      * **autorouting_job.error**
      * - `jsonb` in database
      * - Nullable, no default
      */
      error: db.JSONValue | null;
      /**
      * **autorouting_job.has_error**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      has_error: boolean;
      /**
      * **autorouting_job.input_dsn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      input_dsn: string;
      /**
      * **autorouting_job.is_running**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_running: boolean;
      /**
      * **autorouting_job.output_dsn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      output_dsn: string;
      /**
      * **autorouting_job.was_successful**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      was_successful: boolean;
    }
    export interface Whereable {
      /**
      * **autorouting_job.autorouting_job_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      autorouting_job_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **autorouting_job.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **autorouting_job.error**
      * - `jsonb` in database
      * - Nullable, no default
      */
      error?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **autorouting_job.has_error**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      has_error?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **autorouting_job.input_dsn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      input_dsn?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **autorouting_job.is_running**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_running?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **autorouting_job.output_dsn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      output_dsn?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **autorouting_job.was_successful**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      was_successful?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **autorouting_job.autorouting_job_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      autorouting_job_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **autorouting_job.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **autorouting_job.error**
      * - `jsonb` in database
      * - Nullable, no default
      */
      error?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      /**
      * **autorouting_job.has_error**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      has_error?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **autorouting_job.input_dsn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      input_dsn: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **autorouting_job.is_running**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_running?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **autorouting_job.output_dsn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      output_dsn: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **autorouting_job.was_successful**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      was_successful?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **autorouting_job.autorouting_job_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      autorouting_job_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **autorouting_job.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **autorouting_job.error**
      * - `jsonb` in database
      * - Nullable, no default
      */
      error?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **autorouting_job.has_error**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      has_error?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **autorouting_job.input_dsn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      input_dsn?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **autorouting_job.is_running**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_running?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **autorouting_job.output_dsn**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      output_dsn?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **autorouting_job.was_successful**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      was_successful?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'autorouting_job_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = autorouting_job.Table;
    export type Selectable = autorouting_job.Selectable;
    export type JSONSelectable = autorouting_job.JSONSelectable;
    export type Whereable = autorouting_job.Whereable;
    export type Insertable = autorouting_job.Insertable;
    export type Updatable = autorouting_job.Updatable;
    export type UniqueIndex = autorouting_job.UniqueIndex;
    export type Column = autorouting_job.Column;
  
    export type AllBaseTables = [autorouting_job.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [autorouting_job.Table];
  }



  /* === schema: graphile_worker === */

  export namespace graphile_worker {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    /**
     * **graphile_worker._private_job_queues**
     * - Table in database
     */
    export namespace _private_job_queues {
      export type Table = 'graphile_worker._private_job_queues';
      export interface Selectable {
        /**
        * **graphile_worker._private_job_queues.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **graphile_worker._private_job_queues.is_available**
        * - `bool` in database
        * - Generated column
        */
        is_available: boolean;
        /**
        * **graphile_worker._private_job_queues.locked_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        locked_at: Date | null;
        /**
        * **graphile_worker._private_job_queues.locked_by**
        * - `text` in database
        * - Nullable, no default
        */
        locked_by: string | null;
        /**
        * **graphile_worker._private_job_queues.queue_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        queue_name: string;
      }
      export interface JSONSelectable {
        /**
        * **graphile_worker._private_job_queues.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **graphile_worker._private_job_queues.is_available**
        * - `bool` in database
        * - Generated column
        */
        is_available: boolean;
        /**
        * **graphile_worker._private_job_queues.locked_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        locked_at: db.TimestampTzString | null;
        /**
        * **graphile_worker._private_job_queues.locked_by**
        * - `text` in database
        * - Nullable, no default
        */
        locked_by: string | null;
        /**
        * **graphile_worker._private_job_queues.queue_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        queue_name: string;
      }
      export interface Whereable {
        /**
        * **graphile_worker._private_job_queues.id**
        * - `int4` in database
        * - Generated column
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_job_queues.is_available**
        * - `bool` in database
        * - Generated column
        */
        is_available?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_job_queues.locked_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        locked_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_job_queues.locked_by**
        * - `text` in database
        * - Nullable, no default
        */
        locked_by?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_job_queues.queue_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        queue_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **graphile_worker._private_job_queues.locked_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        locked_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_job_queues.locked_by**
        * - `text` in database
        * - Nullable, no default
        */
        locked_by?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_job_queues.queue_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        queue_name: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **graphile_worker._private_job_queues.locked_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        locked_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_job_queues.locked_by**
        * - `text` in database
        * - Nullable, no default
        */
        locked_by?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_job_queues.queue_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        queue_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'job_queues_pkey1' | 'job_queues_queue_name_key';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **graphile_worker._private_jobs**
     * - Table in database
     */
    export namespace _private_jobs {
      export type Table = 'graphile_worker._private_jobs';
      export interface Selectable {
        /**
        * **graphile_worker._private_jobs.attempts**
        * - `int2` in database
        * - `NOT NULL`, default: `0`
        */
        attempts: number;
        /**
        * **graphile_worker._private_jobs.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: Date;
        /**
        * **graphile_worker._private_jobs.flags**
        * - `jsonb` in database
        * - Nullable, no default
        */
        flags: db.JSONValue | null;
        /**
        * **graphile_worker._private_jobs.id**
        * - `int8` in database
        * - Generated column
        */
        id: db.Int8String;
        /**
        * **graphile_worker._private_jobs.is_available**
        * - `bool` in database
        * - Generated column
        */
        is_available: boolean;
        /**
        * **graphile_worker._private_jobs.job_queue_id**
        * - `int4` in database
        * - Nullable, no default
        */
        job_queue_id: number | null;
        /**
        * **graphile_worker._private_jobs.key**
        * - `text` in database
        * - Nullable, no default
        */
        key: string | null;
        /**
        * **graphile_worker._private_jobs.last_error**
        * - `text` in database
        * - Nullable, no default
        */
        last_error: string | null;
        /**
        * **graphile_worker._private_jobs.locked_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        locked_at: Date | null;
        /**
        * **graphile_worker._private_jobs.locked_by**
        * - `text` in database
        * - Nullable, no default
        */
        locked_by: string | null;
        /**
        * **graphile_worker._private_jobs.max_attempts**
        * - `int2` in database
        * - `NOT NULL`, default: `25`
        */
        max_attempts: number;
        /**
        * **graphile_worker._private_jobs.payload**
        * - `json` in database
        * - `NOT NULL`, default: `'{}'::json`
        */
        payload: db.JSONValue;
        /**
        * **graphile_worker._private_jobs.priority**
        * - `int2` in database
        * - `NOT NULL`, default: `0`
        */
        priority: number;
        /**
        * **graphile_worker._private_jobs.revision**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        revision: number;
        /**
        * **graphile_worker._private_jobs.run_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        run_at: Date;
        /**
        * **graphile_worker._private_jobs.task_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        task_id: number;
        /**
        * **graphile_worker._private_jobs.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **graphile_worker._private_jobs.attempts**
        * - `int2` in database
        * - `NOT NULL`, default: `0`
        */
        attempts: number;
        /**
        * **graphile_worker._private_jobs.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at: db.TimestampTzString;
        /**
        * **graphile_worker._private_jobs.flags**
        * - `jsonb` in database
        * - Nullable, no default
        */
        flags: db.JSONValue | null;
        /**
        * **graphile_worker._private_jobs.id**
        * - `int8` in database
        * - Generated column
        */
        id: number;
        /**
        * **graphile_worker._private_jobs.is_available**
        * - `bool` in database
        * - Generated column
        */
        is_available: boolean;
        /**
        * **graphile_worker._private_jobs.job_queue_id**
        * - `int4` in database
        * - Nullable, no default
        */
        job_queue_id: number | null;
        /**
        * **graphile_worker._private_jobs.key**
        * - `text` in database
        * - Nullable, no default
        */
        key: string | null;
        /**
        * **graphile_worker._private_jobs.last_error**
        * - `text` in database
        * - Nullable, no default
        */
        last_error: string | null;
        /**
        * **graphile_worker._private_jobs.locked_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        locked_at: db.TimestampTzString | null;
        /**
        * **graphile_worker._private_jobs.locked_by**
        * - `text` in database
        * - Nullable, no default
        */
        locked_by: string | null;
        /**
        * **graphile_worker._private_jobs.max_attempts**
        * - `int2` in database
        * - `NOT NULL`, default: `25`
        */
        max_attempts: number;
        /**
        * **graphile_worker._private_jobs.payload**
        * - `json` in database
        * - `NOT NULL`, default: `'{}'::json`
        */
        payload: db.JSONValue;
        /**
        * **graphile_worker._private_jobs.priority**
        * - `int2` in database
        * - `NOT NULL`, default: `0`
        */
        priority: number;
        /**
        * **graphile_worker._private_jobs.revision**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        revision: number;
        /**
        * **graphile_worker._private_jobs.run_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        run_at: db.TimestampTzString;
        /**
        * **graphile_worker._private_jobs.task_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        task_id: number;
        /**
        * **graphile_worker._private_jobs.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **graphile_worker._private_jobs.attempts**
        * - `int2` in database
        * - `NOT NULL`, default: `0`
        */
        attempts?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.flags**
        * - `jsonb` in database
        * - Nullable, no default
        */
        flags?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.id**
        * - `int8` in database
        * - Generated column
        */
        id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.is_available**
        * - `bool` in database
        * - Generated column
        */
        is_available?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.job_queue_id**
        * - `int4` in database
        * - Nullable, no default
        */
        job_queue_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.key**
        * - `text` in database
        * - Nullable, no default
        */
        key?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.last_error**
        * - `text` in database
        * - Nullable, no default
        */
        last_error?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.locked_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        locked_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.locked_by**
        * - `text` in database
        * - Nullable, no default
        */
        locked_by?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.max_attempts**
        * - `int2` in database
        * - `NOT NULL`, default: `25`
        */
        max_attempts?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.payload**
        * - `json` in database
        * - `NOT NULL`, default: `'{}'::json`
        */
        payload?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.priority**
        * - `int2` in database
        * - `NOT NULL`, default: `0`
        */
        priority?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.revision**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        revision?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.run_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        run_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.task_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        task_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_jobs.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **graphile_worker._private_jobs.attempts**
        * - `int2` in database
        * - `NOT NULL`, default: `0`
        */
        attempts?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.flags**
        * - `jsonb` in database
        * - Nullable, no default
        */
        flags?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.job_queue_id**
        * - `int4` in database
        * - Nullable, no default
        */
        job_queue_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.key**
        * - `text` in database
        * - Nullable, no default
        */
        key?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.last_error**
        * - `text` in database
        * - Nullable, no default
        */
        last_error?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.locked_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        locked_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.locked_by**
        * - `text` in database
        * - Nullable, no default
        */
        locked_by?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.max_attempts**
        * - `int2` in database
        * - `NOT NULL`, default: `25`
        */
        max_attempts?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.payload**
        * - `json` in database
        * - `NOT NULL`, default: `'{}'::json`
        */
        payload?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.priority**
        * - `int2` in database
        * - `NOT NULL`, default: `0`
        */
        priority?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.revision**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        revision?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.run_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        run_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.task_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        task_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **graphile_worker._private_jobs.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **graphile_worker._private_jobs.attempts**
        * - `int2` in database
        * - `NOT NULL`, default: `0`
        */
        attempts?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.flags**
        * - `jsonb` in database
        * - Nullable, no default
        */
        flags?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.job_queue_id**
        * - `int4` in database
        * - Nullable, no default
        */
        job_queue_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.key**
        * - `text` in database
        * - Nullable, no default
        */
        key?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.last_error**
        * - `text` in database
        * - Nullable, no default
        */
        last_error?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.locked_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        locked_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.locked_by**
        * - `text` in database
        * - Nullable, no default
        */
        locked_by?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.max_attempts**
        * - `int2` in database
        * - `NOT NULL`, default: `25`
        */
        max_attempts?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.payload**
        * - `json` in database
        * - `NOT NULL`, default: `'{}'::json`
        */
        payload?: db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.priority**
        * - `int2` in database
        * - `NOT NULL`, default: `0`
        */
        priority?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.revision**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        revision?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.run_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        run_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.task_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        task_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **graphile_worker._private_jobs.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'jobs_key_key1' | 'jobs_pkey1';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **graphile_worker._private_known_crontabs**
     * - Table in database
     */
    export namespace _private_known_crontabs {
      export type Table = 'graphile_worker._private_known_crontabs';
      export interface Selectable {
        /**
        * **graphile_worker._private_known_crontabs.identifier**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier: string;
        /**
        * **graphile_worker._private_known_crontabs.known_since**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        known_since: Date;
        /**
        * **graphile_worker._private_known_crontabs.last_execution**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        last_execution: Date | null;
      }
      export interface JSONSelectable {
        /**
        * **graphile_worker._private_known_crontabs.identifier**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier: string;
        /**
        * **graphile_worker._private_known_crontabs.known_since**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        known_since: db.TimestampTzString;
        /**
        * **graphile_worker._private_known_crontabs.last_execution**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        last_execution: db.TimestampTzString | null;
      }
      export interface Whereable {
        /**
        * **graphile_worker._private_known_crontabs.identifier**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_known_crontabs.known_since**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        known_since?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_known_crontabs.last_execution**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        last_execution?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **graphile_worker._private_known_crontabs.identifier**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **graphile_worker._private_known_crontabs.known_since**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        known_since: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
        /**
        * **graphile_worker._private_known_crontabs.last_execution**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        last_execution?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **graphile_worker._private_known_crontabs.identifier**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **graphile_worker._private_known_crontabs.known_since**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        known_since?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
        /**
        * **graphile_worker._private_known_crontabs.last_execution**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        last_execution?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'known_crontabs_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **graphile_worker._private_tasks**
     * - Table in database
     */
    export namespace _private_tasks {
      export type Table = 'graphile_worker._private_tasks';
      export interface Selectable {
        /**
        * **graphile_worker._private_tasks.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **graphile_worker._private_tasks.identifier**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier: string;
      }
      export interface JSONSelectable {
        /**
        * **graphile_worker._private_tasks.id**
        * - `int4` in database
        * - Generated column
        */
        id: number;
        /**
        * **graphile_worker._private_tasks.identifier**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier: string;
      }
      export interface Whereable {
        /**
        * **graphile_worker._private_tasks.id**
        * - `int4` in database
        * - Generated column
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker._private_tasks.identifier**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **graphile_worker._private_tasks.identifier**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **graphile_worker._private_tasks.identifier**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        identifier?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'tasks_identifier_key' | 'tasks_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **graphile_worker.jobs**
     * - View in database
     */
    export namespace jobs {
      export type Table = 'graphile_worker.jobs';
      export interface Selectable {
        /**
        * **graphile_worker.jobs.attempts**
        * - `int2` in database
        * - Nullable, no default
        */
        attempts: number | null;
        /**
        * **graphile_worker.jobs.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at: Date | null;
        /**
        * **graphile_worker.jobs.flags**
        * - `jsonb` in database
        * - Nullable, no default
        */
        flags: db.JSONValue | null;
        /**
        * **graphile_worker.jobs.id**
        * - `int8` in database
        * - Nullable, no default
        */
        id: db.Int8String | null;
        /**
        * **graphile_worker.jobs.key**
        * - `text` in database
        * - Nullable, no default
        */
        key: string | null;
        /**
        * **graphile_worker.jobs.last_error**
        * - `text` in database
        * - Nullable, no default
        */
        last_error: string | null;
        /**
        * **graphile_worker.jobs.locked_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        locked_at: Date | null;
        /**
        * **graphile_worker.jobs.locked_by**
        * - `text` in database
        * - Nullable, no default
        */
        locked_by: string | null;
        /**
        * **graphile_worker.jobs.max_attempts**
        * - `int2` in database
        * - Nullable, no default
        */
        max_attempts: number | null;
        /**
        * **graphile_worker.jobs.priority**
        * - `int2` in database
        * - Nullable, no default
        */
        priority: number | null;
        /**
        * **graphile_worker.jobs.queue_name**
        * - `text` in database
        * - Nullable, no default
        */
        queue_name: string | null;
        /**
        * **graphile_worker.jobs.revision**
        * - `int4` in database
        * - Nullable, no default
        */
        revision: number | null;
        /**
        * **graphile_worker.jobs.run_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        run_at: Date | null;
        /**
        * **graphile_worker.jobs.task_identifier**
        * - `text` in database
        * - Nullable, no default
        */
        task_identifier: string | null;
        /**
        * **graphile_worker.jobs.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at: Date | null;
      }
      export interface JSONSelectable {
        /**
        * **graphile_worker.jobs.attempts**
        * - `int2` in database
        * - Nullable, no default
        */
        attempts: number | null;
        /**
        * **graphile_worker.jobs.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at: db.TimestampTzString | null;
        /**
        * **graphile_worker.jobs.flags**
        * - `jsonb` in database
        * - Nullable, no default
        */
        flags: db.JSONValue | null;
        /**
        * **graphile_worker.jobs.id**
        * - `int8` in database
        * - Nullable, no default
        */
        id: number | null;
        /**
        * **graphile_worker.jobs.key**
        * - `text` in database
        * - Nullable, no default
        */
        key: string | null;
        /**
        * **graphile_worker.jobs.last_error**
        * - `text` in database
        * - Nullable, no default
        */
        last_error: string | null;
        /**
        * **graphile_worker.jobs.locked_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        locked_at: db.TimestampTzString | null;
        /**
        * **graphile_worker.jobs.locked_by**
        * - `text` in database
        * - Nullable, no default
        */
        locked_by: string | null;
        /**
        * **graphile_worker.jobs.max_attempts**
        * - `int2` in database
        * - Nullable, no default
        */
        max_attempts: number | null;
        /**
        * **graphile_worker.jobs.priority**
        * - `int2` in database
        * - Nullable, no default
        */
        priority: number | null;
        /**
        * **graphile_worker.jobs.queue_name**
        * - `text` in database
        * - Nullable, no default
        */
        queue_name: string | null;
        /**
        * **graphile_worker.jobs.revision**
        * - `int4` in database
        * - Nullable, no default
        */
        revision: number | null;
        /**
        * **graphile_worker.jobs.run_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        run_at: db.TimestampTzString | null;
        /**
        * **graphile_worker.jobs.task_identifier**
        * - `text` in database
        * - Nullable, no default
        */
        task_identifier: string | null;
        /**
        * **graphile_worker.jobs.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at: db.TimestampTzString | null;
      }
      export interface Whereable {
        /**
        * **graphile_worker.jobs.attempts**
        * - `int2` in database
        * - Nullable, no default
        */
        attempts?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.flags**
        * - `jsonb` in database
        * - Nullable, no default
        */
        flags?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.id**
        * - `int8` in database
        * - Nullable, no default
        */
        id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.key**
        * - `text` in database
        * - Nullable, no default
        */
        key?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.last_error**
        * - `text` in database
        * - Nullable, no default
        */
        last_error?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.locked_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        locked_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.locked_by**
        * - `text` in database
        * - Nullable, no default
        */
        locked_by?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.max_attempts**
        * - `int2` in database
        * - Nullable, no default
        */
        max_attempts?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.priority**
        * - `int2` in database
        * - Nullable, no default
        */
        priority?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.queue_name**
        * - `text` in database
        * - Nullable, no default
        */
        queue_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.revision**
        * - `int4` in database
        * - Nullable, no default
        */
        revision?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.run_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        run_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.task_identifier**
        * - `text` in database
        * - Nullable, no default
        */
        task_identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.jobs.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        [key: string]: never;
      }
      export interface Updatable {
        [key: string]: never;
      }
      export type UniqueIndex = never;
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **graphile_worker.migrations**
     * - Table in database
     */
    export namespace migrations {
      export type Table = 'graphile_worker.migrations';
      export interface Selectable {
        /**
        * **graphile_worker.migrations.breaking**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        breaking: boolean;
        /**
        * **graphile_worker.migrations.id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        id: number;
        /**
        * **graphile_worker.migrations.ts**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        ts: Date;
      }
      export interface JSONSelectable {
        /**
        * **graphile_worker.migrations.breaking**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        breaking: boolean;
        /**
        * **graphile_worker.migrations.id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        id: number;
        /**
        * **graphile_worker.migrations.ts**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        ts: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **graphile_worker.migrations.breaking**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        breaking?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.migrations.id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **graphile_worker.migrations.ts**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        ts?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **graphile_worker.migrations.breaking**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        breaking?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **graphile_worker.migrations.id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **graphile_worker.migrations.ts**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        ts?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **graphile_worker.migrations.breaking**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        breaking?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **graphile_worker.migrations.id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **graphile_worker.migrations.ts**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `now()`
        */
        ts?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'migrations_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = _private_job_queues.Table | _private_jobs.Table | _private_known_crontabs.Table | _private_tasks.Table | jobs.Table | migrations.Table;
    export type Selectable = _private_job_queues.Selectable | _private_jobs.Selectable | _private_known_crontabs.Selectable | _private_tasks.Selectable | jobs.Selectable | migrations.Selectable;
    export type JSONSelectable = _private_job_queues.JSONSelectable | _private_jobs.JSONSelectable | _private_known_crontabs.JSONSelectable | _private_tasks.JSONSelectable | jobs.JSONSelectable | migrations.JSONSelectable;
    export type Whereable = _private_job_queues.Whereable | _private_jobs.Whereable | _private_known_crontabs.Whereable | _private_tasks.Whereable | jobs.Whereable | migrations.Whereable;
    export type Insertable = _private_job_queues.Insertable | _private_jobs.Insertable | _private_known_crontabs.Insertable | _private_tasks.Insertable | jobs.Insertable | migrations.Insertable;
    export type Updatable = _private_job_queues.Updatable | _private_jobs.Updatable | _private_known_crontabs.Updatable | _private_tasks.Updatable | jobs.Updatable | migrations.Updatable;
    export type UniqueIndex = _private_job_queues.UniqueIndex | _private_jobs.UniqueIndex | _private_known_crontabs.UniqueIndex | _private_tasks.UniqueIndex | jobs.UniqueIndex | migrations.UniqueIndex;
    export type Column = _private_job_queues.Column | _private_jobs.Column | _private_known_crontabs.Column | _private_tasks.Column | jobs.Column | migrations.Column;
  
    export type AllBaseTables = [_private_job_queues.Table, _private_jobs.Table, _private_known_crontabs.Table, _private_tasks.Table, migrations.Table];
    export type AllForeignTables = [];
    export type AllViews = [jobs.Table];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [_private_job_queues.Table, _private_jobs.Table, _private_known_crontabs.Table, _private_tasks.Table, jobs.Table, migrations.Table];
  }


  /* === global aggregate types === */

  export type Schema = 'public' | 'graphile_worker';
  export type Table = public.Table | graphile_worker.Table;
  export type Selectable = public.Selectable | graphile_worker.Selectable;
  export type JSONSelectable = public.JSONSelectable | graphile_worker.JSONSelectable;
  export type Whereable = public.Whereable | graphile_worker.Whereable;
  export type Insertable = public.Insertable | graphile_worker.Insertable;
  export type Updatable = public.Updatable | graphile_worker.Updatable;
  export type UniqueIndex = public.UniqueIndex | graphile_worker.UniqueIndex;
  export type Column = public.Column | graphile_worker.Column;

  export type AllSchemas = ['public', 'graphile_worker'];
  export type AllBaseTables = [...public.AllBaseTables, ...graphile_worker.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables, ...graphile_worker.AllForeignTables];
  export type AllViews = [...public.AllViews, ...graphile_worker.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews, ...graphile_worker.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews, ...graphile_worker.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "autorouting_job": autorouting_job.Selectable;
    "graphile_worker._private_job_queues": graphile_worker._private_job_queues.Selectable;
    "graphile_worker._private_jobs": graphile_worker._private_jobs.Selectable;
    "graphile_worker._private_known_crontabs": graphile_worker._private_known_crontabs.Selectable;
    "graphile_worker._private_tasks": graphile_worker._private_tasks.Selectable;
    "graphile_worker.jobs": graphile_worker.jobs.Selectable;
    "graphile_worker.migrations": graphile_worker.migrations.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "autorouting_job": autorouting_job.JSONSelectable;
    "graphile_worker._private_job_queues": graphile_worker._private_job_queues.JSONSelectable;
    "graphile_worker._private_jobs": graphile_worker._private_jobs.JSONSelectable;
    "graphile_worker._private_known_crontabs": graphile_worker._private_known_crontabs.JSONSelectable;
    "graphile_worker._private_tasks": graphile_worker._private_tasks.JSONSelectable;
    "graphile_worker.jobs": graphile_worker.jobs.JSONSelectable;
    "graphile_worker.migrations": graphile_worker.migrations.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "autorouting_job": autorouting_job.Whereable;
    "graphile_worker._private_job_queues": graphile_worker._private_job_queues.Whereable;
    "graphile_worker._private_jobs": graphile_worker._private_jobs.Whereable;
    "graphile_worker._private_known_crontabs": graphile_worker._private_known_crontabs.Whereable;
    "graphile_worker._private_tasks": graphile_worker._private_tasks.Whereable;
    "graphile_worker.jobs": graphile_worker.jobs.Whereable;
    "graphile_worker.migrations": graphile_worker.migrations.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "autorouting_job": autorouting_job.Insertable;
    "graphile_worker._private_job_queues": graphile_worker._private_job_queues.Insertable;
    "graphile_worker._private_jobs": graphile_worker._private_jobs.Insertable;
    "graphile_worker._private_known_crontabs": graphile_worker._private_known_crontabs.Insertable;
    "graphile_worker._private_tasks": graphile_worker._private_tasks.Insertable;
    "graphile_worker.jobs": graphile_worker.jobs.Insertable;
    "graphile_worker.migrations": graphile_worker.migrations.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "autorouting_job": autorouting_job.Updatable;
    "graphile_worker._private_job_queues": graphile_worker._private_job_queues.Updatable;
    "graphile_worker._private_jobs": graphile_worker._private_jobs.Updatable;
    "graphile_worker._private_known_crontabs": graphile_worker._private_known_crontabs.Updatable;
    "graphile_worker._private_tasks": graphile_worker._private_tasks.Updatable;
    "graphile_worker.jobs": graphile_worker.jobs.Updatable;
    "graphile_worker.migrations": graphile_worker.migrations.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "autorouting_job": autorouting_job.UniqueIndex;
    "graphile_worker._private_job_queues": graphile_worker._private_job_queues.UniqueIndex;
    "graphile_worker._private_jobs": graphile_worker._private_jobs.UniqueIndex;
    "graphile_worker._private_known_crontabs": graphile_worker._private_known_crontabs.UniqueIndex;
    "graphile_worker._private_tasks": graphile_worker._private_tasks.UniqueIndex;
    "graphile_worker.jobs": graphile_worker.jobs.UniqueIndex;
    "graphile_worker.migrations": graphile_worker.migrations.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "autorouting_job": autorouting_job.Column;
    "graphile_worker._private_job_queues": graphile_worker._private_job_queues.Column;
    "graphile_worker._private_jobs": graphile_worker._private_jobs.Column;
    "graphile_worker._private_known_crontabs": graphile_worker._private_known_crontabs.Column;
    "graphile_worker._private_tasks": graphile_worker._private_tasks.Column;
    "graphile_worker.jobs": graphile_worker.jobs.Column;
    "graphile_worker.migrations": graphile_worker.migrations.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "autorouting_job": autorouting_job.SQL;
    "graphile_worker._private_job_queues": graphile_worker._private_job_queues.SQL;
    "graphile_worker._private_jobs": graphile_worker._private_jobs.SQL;
    "graphile_worker._private_known_crontabs": graphile_worker._private_known_crontabs.SQL;
    "graphile_worker._private_tasks": graphile_worker._private_tasks.SQL;
    "graphile_worker.jobs": graphile_worker.jobs.SQL;
    "graphile_worker.migrations": graphile_worker.migrations.SQL;
  }[T];

}
